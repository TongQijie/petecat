using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Reflection.Emit;
using System.Threading;
using System.Linq;

namespace Petecat.Aop
{
    public class DefaultAopTypeGenerator : IAopTypeGenerator
    {
        public DefaultAopTypeGenerator()
        {
            var assemblyName = new AssemblyName() { Name = "AutoGeneratedAopModule.dll" };

            _AssemblyBuilder = AppDomain.CurrentDomain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.RunAndSave);

            _ModuleBuilder = _AssemblyBuilder.DefineDynamicModule("AutoGeneratedAopModule", "AutoGeneratedAopModule.dll");
        }

        private AssemblyBuilder _AssemblyBuilder = null;

        private ModuleBuilder _ModuleBuilder = null;

        private Dictionary<string, Type> _AutoGeneratedTypes = null;

        public Dictionary<string, Type> AutoGeneratedTypes { get { return _AutoGeneratedTypes ?? (_AutoGeneratedTypes = new Dictionary<string, Type>()); } }

        public Type GetType(Type baseClass, IAopInterceptor interceptor)
        {
            var key = baseClass.FullName + "_" + interceptor.GetType().FullName;
            if (AutoGeneratedTypes.ContainsKey(key))
            {
                return AutoGeneratedTypes[key];
            }
            else
            {
                var autoGeneratedType = Generate(baseClass);
                AutoGeneratedTypes.Add(key, autoGeneratedType);
                return autoGeneratedType;
            }
        }

        public Type Generate(Type baseClass)
        {
            var typeBuilder = _ModuleBuilder.DefineType(GenerateClassName(baseClass), TypeAttributes.Public, baseClass);

            // define field
            // private IAopInterceptor _AopInterceptor = null;
            var fieldBuilder = typeBuilder.DefineField("_AopInterceptor", typeof(IAopInterceptor), FieldAttributes.Private);

            // define constructor
            // public ClassName(IAopInterceptor aopInterceptor);
            // {
            //     this.base();
            //     this._AopInterceptor = aopInterceptor;
            // }
            var baseCtor = baseClass.GetConstructor(new Type[0]);
            var ctorBuilder = typeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, new Type[] { typeof(IAopInterceptor) });
            var ctorIL = ctorBuilder.GetILGenerator();
            ctorIL.Emit(OpCodes.Ldarg_0);
            ctorIL.Emit(OpCodes.Call, baseCtor);
            ctorIL.Emit(OpCodes.Ldarg_0);
            ctorIL.Emit(OpCodes.Ldarg_1);
            ctorIL.Emit(OpCodes.Stfld, fieldBuilder);
            ctorIL.Emit(OpCodes.Ret);

            var objectMethods = typeof(object).GetMethods();

            foreach (var method in baseClass.GetMethods().Where(x => x.IsVirtual && !objectMethods.ToList().Exists(y => y.Name == x.Name)))
            {
                // define method
                // public ReturnType MethodName(MethodParameters...)
                // {
                //     IAopInvocation aopInvocation = new DefaultAopInvocation();
                //     aopInvocation.Owner = this;
                //     aopInvocation.Method = methodInfo;
                //     aopInvocation.ParameterValues = MethodParameters;
                //     this._AopInterceptor.Intercept(aopInvocation);
                //     return aopInvocation.ReturnValue;
                // }
                var methodBuilder = typeBuilder.DefineMethod(method.Name, method.Attributes,
                    method.ReturnType, method.GetParameters().Select(x => x.ParameterType).ToArray());

                ILGenerator mthdIL = methodBuilder.GetILGenerator();

                // var aopInvocation = new DefaultAopInvocation();
                mthdIL.Emit(OpCodes.Nop);
                mthdIL.Emit(OpCodes.Newobj, typeof(DefaultAopInvocation).GetConstructor(new Type[0]));
                mthdIL.Emit(OpCodes.Stloc_0);
                // var baseClass = new AppleBase();
                mthdIL.Emit(OpCodes.Newobj, baseClass.GetConstructor(new Type[0]));
                mthdIL.Emit(OpCodes.Stloc_1);
                // typeof(DefaultAopInvocation).GetMethod("set_Owner").Invoke(aopInvocation, new object[] { baseClass });
                mthdIL.Emit(OpCodes.Ldtoken, typeof(DefaultAopInvocation));
                

                mthdIL.Emit(OpCodes.Ldloc_0);
                mthdIL.Emit(OpCodes.Ldarg_0);
                mthdIL.Emit(OpCodes.Callvirt, typeof(DefaultAopInvocation).GetMethod("set_Owner"));
                mthdIL.Emit(OpCodes.Ldloc_0);
                mthdIL.Emit(OpCodes.Ldarg_0);
                mthdIL.Emit(OpCodes.Call, typeof(object).GetMethod("GetType"));
                mthdIL.Emit(OpCodes.Ldstr, method.Name);
                mthdIL.Emit(OpCodes.Callvirt, typeof(Type).GetMethod("GetMethod", new Type[] { typeof(string) }));
                mthdIL.Emit(OpCodes.Callvirt, typeof(DefaultAopInvocation).GetMethod("set_Method"));
                mthdIL.Emit(OpCodes.Ldloc_0);
                mthdIL.Emit(OpCodes.Ldc_I4_1);
                mthdIL.Emit(OpCodes.Newarr, typeof(object));
                mthdIL.Emit(OpCodes.Stloc_2);
                mthdIL.Emit(OpCodes.Ldloc_2);
                mthdIL.Emit(OpCodes.Ldc_I4_0);
                mthdIL.Emit(OpCodes.Ldarg_1);
                mthdIL.Emit(OpCodes.Stelem_Ref);
                mthdIL.Emit(OpCodes.Ldloc_2);
                mthdIL.Emit(OpCodes.Callvirt, typeof(DefaultAopInvocation).GetMethod("set_ParameterValues"));
                mthdIL.Emit(OpCodes.Ldarg_0);
                mthdIL.Emit(OpCodes.Ldfld, fieldBuilder);
                mthdIL.Emit(OpCodes.Ldloc_0);
                mthdIL.Emit(OpCodes.Callvirt, typeof(IAopInterceptor).GetMethod("Intercept"));
                mthdIL.Emit(OpCodes.Ldloc_0);
                mthdIL.Emit(OpCodes.Callvirt, typeof(DefaultAopInvocation).GetMethod("get_ReturnValue"));
                mthdIL.Emit(OpCodes.Stloc_1);
                mthdIL.Emit(OpCodes.Br_S, 0);
                mthdIL.Emit(OpCodes.Ldloc_1);
                mthdIL.Emit(OpCodes.Ret); 

                //mthdIL.Emit(OpCodes.Ldstr, string.Format(("it is calling method '{0}'."), method.Name));
                //mthdIL.Emit(OpCodes.Call, typeof(System.Console).GetMethod("WriteLine", new Type[] { typeof(String) }));
                //mthdIL.Emit(OpCodes.Ret);

                typeBuilder.DefineMethodOverride(methodBuilder, baseClass.GetMethod(method.Name));
            }

            var targetType = typeBuilder.CreateType();

            _AssemblyBuilder.Save("AutoGeneratedAopModule.dll");

            return targetType;
        }

        private string GenerateClassName(Type baseClass)
        {
            return baseClass.Name + "_" + Path.GetRandomFileName().Replace(".", "").ToUpper();
        }
    }
}
